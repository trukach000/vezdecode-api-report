1.
  Проблема: Пользователь может создать пользователя в ролью User а потом обновить себя же на роль Admin,
        что позволит ему исполнять запросы которые дозволены только администраторам (огромная дыра в безопасности)
    Шаги воспроизведения:
        1) Отправить POST-запрос к ресурсу /user на создание пользователя с role="user"
        2) Отправить GET-запрос к /user/login для получения токена
        3) Отправить PUT-апрос к /user с полученным токеным и данным именем пользователя.
            А в теле указать {...  "role": "admin" ...}
    Ожидаемый результат: Обновление пользователя должно запретить изменять роль пользователя на "admin" (или вообще изменять это поле)
    Реальное поведение: Поле изменяется и теперь пользователь получает доступ ко всем админским штукам
2.
  Проблема: При получении питомцев по статусу pet/findByStatus параметр status не фильтрует выборку
          Шаги воспроизведения:
              1) отправить GET запрос на pet/findByStatus?status=sold
          Ожидаемый результат: в выборке будут только питомцы status: sold
          Реальное поведение: в выборке все питомцы
3.
    Проблема: API позволяет создать заказ на питомца который находится в статусе SOLD или PENDING
    Шаги воспроизведения:
        1) Отправить POST-запрос к ресурсу /store/order с телом {...petId:[ид питомца в статусе SOLD или PENDING]}
    Ожидаемый результат:
        Заказ не создасться на проданного питомца
    Реальное поведение:
        Заказ создается
4.
    Проблема: При поиске заказа по ИД запрос не работает при ид_заказа > 10
    Шаги воспроизведения:
        1) сделать POST запрос к ресурсу /store/order/{orderId} с orderID > 10
    Ожидаемый результат: возвращается информация о заказе с данным ИД если он существует
    Реальное поведение: возвращается ошибка
5.
    Проблема: При создании пользователя , если передать в параметре role невалидные данные сервер отвечает html'ем
    	    со стек трейсом ошибки. (работает для многих урлов при передаче невалидных значений)
    	Шаги воспроизведения:
    		1) Отправить POST-запрос к ресурсу /user c телом { ... "role": "somethingWrong" ... }
    	Ожидаемый результат: Сервер ответит 400ым кодом с каким нибудет адекватным описанием ошибки
    	Реальное поведение: В ответе сервера находится HTML со стек трейсом ошибки, и мы видим некоторые
    	    внутренние детали устройства сервера.